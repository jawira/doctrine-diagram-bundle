{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>This Symfony bundle generates ER diagrams representing the current state of your database.</p> <p>This bundle is not intended as a design tool but rather as a utility for monitoring and visualizing database schema status.</p> <p>The main functionalities are:</p> <ul> <li>Generate diagrams in different sizes (mini, midi, and maxi).</li> <li>Save diagram in puml, svg, and png formats.</li> <li>You can change the diagram's styles and colors using themes.</li> </ul>"},{"location":"configuration.html","title":"Configuration","text":""},{"location":"configuration.html#how-to-configure-the-bundle","title":"How to configure the bundle","text":"<p>You have to ways to configure DoctrineDiagramBundle.</p> <ol> <li>Using a configuration file <code>config/packages/doctrine_diagram.yaml</code>.</li> <li>Using command's options.</li> </ol> <p>Info</p> <p>Command line options will always have priority over configuration file.</p>"},{"location":"configuration.html#commands-options","title":"Command's options","text":"<p>Use <code>help</code> command to see available options for <code>doctrine:diagram:er</code> and <code>doctrine:diagram:class</code>.</p> <pre><code>$ bin/console help doctrine:diagram:er\nOptions:\n    --filename=FILENAME      Destination file name.\n    --format=FORMAT          Diagram format (svg, png or puml).\n    --size=SIZE              Diagram size (mini, midi or maxi).\n    --converter=CONVERTER    Which strategy will be used to convert puml to another format (auto, jar or server).\n    --server=SERVER          PlantUML server URL, used to convert puml diagrams to svg or png.\n    --jar=JAR                Path to plantuml.jar, used to convert puml diagrams to svg or png.\n    --connection=CONNECTION  Doctrine connection to use.\n    --theme=THEME            Change diagram colors and style.\n    --exclude=EXCLUDE        Comma separated list of tables to exclude from diagram.\n</code></pre> <pre><code>$ bin/console help doctrine:diagram:class\nOptions:\n    --filename=FILENAME    Destination file name.\n    --format=FORMAT        Diagram format (svg, png or puml).\n    --size=SIZE            Diagram size (mini, midi or maxi).\n    --converter=CONVERTER  Which strategy will be used to convert puml to another format (auto, jar or server).\n    --server=SERVER        PlantUML server URL, used to convert puml diagrams to svg or png.\n    --jar=JAR              Path to plantuml.jar, used to convert puml diagrams to svg or png.\n    --em=EM                Entity Manager to use.\n    --theme=THEME          Change diagram colors and style.\n    --exclude=EXCLUDE      Comma separated list of tables to exclude from diagram.\n</code></pre> <p>Tip</p> <p>The commands <code>doctrine:diagram:er</code> and <code>doctrine:diagram:class</code> share  almost all the same options, the only difference is that  <code>doctrine:diagram:er</code> uses the <code>--connection</code> option, while  <code>doctrine:diagram:class</code> uses <code>--em</code>.</p>"},{"location":"configuration.html#configuration-file","title":"Configuration file","text":"<p>Configuration file is located at <code>config/packages/doctrine_diagram.yaml</code>, this is a full configuration example:</p> <pre><code>doctrine_diagram:\n    er:\n        filename: '%kernel.project_dir%/er'\n        size: midi\n        theme: crt-amber\n        connection: ~\n        exclude:\n            - table1\n            - table2\n    class:\n        filename: '%kernel.project_dir%/class'\n        size: mini\n        theme: plain\n        em: ~\n        exclude:\n            - App\\Entity\\Client\n            - App\\Entity\\Feedback\n    convert:\n        format: svg\n        converter: auto\n        jar: /usr/bin/plantuml\n        server: 'http://www.plantuml.com/plantuml'\n</code></pre> <p>Use the following commands to see your current configuration and all available options:</p> <pre><code>bin/console debug:config doctrine_diagram\nbin/console config:dump-reference doctrine_diagram\n</code></pre>"},{"location":"configuration.html#specify-diagram-name","title":"Specify diagram name","text":"<p>By default, the diagram filename is <code>er.svg</code> for Entity-Relationship diagrams and <code>class.svg</code> for Class diagrams. The file extension is added automatically based on the chosen format.</p> <p>You can modify the filename with the <code>--filename</code> option:</p> <pre><code>bin/console doctrine:diagram:er --filename=customers\nbin/console doctrine:diagram:class --filename=employees\n</code></pre> <p>Alternatively, specify the filename in <code>config/packages/doctrine_diagram.yaml</code>:</p> <pre><code>doctrine_diagram:\n    er:\n        filename: '%kernel.project_dir%/customers'\n    class:\n        filename: '%kernel.project_dir%/employees'\n</code></pre> <p>Tip</p> <p>You don't need to explicitly set filename extension, it's autmatically  added according to selected diagram format.</p>"},{"location":"configuration.html#set-diagram-size","title":"Set diagram size","text":"<p>You can generate diagrams in different sizes:</p> <ul> <li>mini: Display only table or class names.</li> <li>midi: Include tables and columns for Entity-Relationship diagrams and   classes and properties for Class diagrams.</li> <li>maxi: Show table names, columns, and views for Entity-Relationship   diagrams. And classes, properties, and methods for Class diagrams.</li> </ul> <p>Adjust the diagram size using the <code>--size</code> option:</p> <pre><code>bin/console doctrine:diagram:er --size=mini\nbin/console doctrine:diagram:class --size=midi\n</code></pre> <p>Alternatively, set the diagram size in the config file:</p> <pre><code>doctrine_diagram:\n    er:\n        size: mini\n    class:\n        size: midi\n</code></pre>"},{"location":"configuration.html#customizing-themes","title":"Customizing themes","text":"<p>Use themes to change the look of your diagrams.</p> <p>From the terminal, you can set the theme using <code>--theme</code> option.</p> <pre><code>bin/console doctrine:diagram:er --theme=sandstone\nbin/console doctrine:diagram:class --theme=crt-amber\n</code></pre> <p>Alternatively, set the diagram size in the config file:</p> <pre><code>doctrine_diagram:\n    er:\n        theme: sandstone\n    class:\n        theme: crt-amber\n</code></pre> <p>This is a complete list of available themes:</p> <p></p> <p>Please note that all themes might not be available in your system since themes are dependent of the version of PlantUML you have installed.</p> <p>sandstone theme:</p> <p></p> <p>crt-amber theme:</p> <p></p>"},{"location":"configuration.html#excluding-tables-and-classes","title":"Excluding tables and classes","text":"<p>To exclude specific tables from the ER diagram and classes from Class diagram, use the <code>--exclude</code> option. Use comma to specify multiple values.</p> <pre><code>bin/console doctrine:diagram:er --exclude=table1,table2,table3\nbin/console doctrine:diagram:class --exclude=App\\\\Entity\\\\Part\n</code></pre> <p>Note how, in the terminal, we had to escape the backslash character.</p> <p>In the config file, use the <code>exclude</code> key to declare tables and classes you want to omit:</p> <pre><code>doctrine_diagram:\n    er:\n        exclude:\n            - table1\n            - table2\n            - table3\n    class:\n        exclude:\n            - App\\Entity\\Part\n</code></pre>"},{"location":"configuration.html#change-the-diagram-format","title":"Change the diagram format","text":"<p>Three formats are supported: <code>png</code>, <code>svg</code>, and <code>puml</code>.</p> <p>You can set the format from the terminal using the <code>--format</code> option:</p> <pre><code>bin/console doctrine:diagram:er --format=puml\nbin/console doctrine:diagram:class --format=puml\n</code></pre> <p>Alternatively, you can set the format in <code>config/packages/doctrine_diagram.yaml</code>:</p> <pre><code>doctrine_diagram:\n    convert:\n        format: svg\n</code></pre> <p>Tip</p> <p>If you encounter difficulties generating your diagram, use the <code>puml</code>  format as it doesn't require PlantUML.</p>"},{"location":"configuration.html#specifying-how-to-convert-plantuml-diagrams","title":"Specifying how to convert PlantUML diagrams","text":"<p>When generating diagrams, DoctrineDiagramBundle will always generate diagrams in <code>puml</code> format first. If the requested format is <code>puml</code>, then the diagram will be returned as is. Otherwise, if the requested format is <code>png</code> or <code>svg</code>, you will need to configure a \"<code>converter</code>\".</p> <p>PlantUML can be used in two possible ways:</p> <ol> <li>As a local <code>plantuml.jar</code> file.</li> <li>As a remote PlantUML server.</li> </ol> <p>Use the following options to set the <code>jar</code> file.</p> <pre><code>bin/console doctrine:diagram:er --converter=jar --jar=/usr/share/plantuml/plantuml.jar\n</code></pre> <p>You can achieve the same using the configuration file:</p> <pre><code>doctrine_diagram:\n    convert:\n        converter: jar\n        jar: /usr/share/plantuml/plantuml.jar \n</code></pre> <p>The other alternative to generate images is to use a remote PlantUML server:</p> <pre><code>bin/console doctrine:diagram:er --converter=server --server=http://localhost:8080/plantuml\n</code></pre> <p>You can achieve the same using the configuration file:</p> <pre><code>doctrine_diagram:\n    convert:\n        converter: server\n        server: http://localhost:8080/plantuml \n</code></pre> <p>The recommended configuration is <code>auto</code>, with this setting DoctrineDiagramBundle will search for <code>plantuml.jar</code> first , if the jar file is not found then it will use a remote PlantUML server.</p> <pre><code>bin/console doctrine:diagram:er --converter=auto\n</code></pre> <pre><code>doctrine_diagram:\n    convert:\n        converter: auto\n</code></pre> <p>Please read the dedicated page about how to install PlantUML.</p>"},{"location":"dev-notes.html","title":"Dev notes","text":""},{"location":"dev-notes.html#dev-project","title":"Dev project","text":"<p>Add this to <code>composer.json</code> in your project to use the local copy of Diagram Bundle.</p> <pre><code>{\n  \"repositories\": [{\"type\": \"path\", \"url\": \"../doctrine-diagram-bundle\"}]\n}\n</code></pre> <p>Change <code>minimum-stability</code>:</p> <pre><code>{\n  \"minimum-stability\": \"dev\"\n}\n</code></pre> <p>Set branch name:</p> <pre><code>{\n  \"jawira/doctrine-diagram-bundle\": \"dev-theme\"\n}\n</code></pre>"},{"location":"dev-notes.html#documentation","title":"Documentation","text":"<p>To build documentation material theme is required.</p> <pre><code>pip install mkdocs-material\nphing mkdocs:serve\n</code></pre>"},{"location":"installing.html","title":"Installing","text":""},{"location":"installing.html#install-doctrinediagrambundle-with-symfony-flex","title":"Install DoctrineDiagramBundle with Symfony Flex","text":"<p>Open a command console, enter your project directory and enable recipes:</p> <pre><code>composer config extra.symfony.allow-contrib true\n</code></pre> <p>Then install DoctrineDiagramBundle:</p> <pre><code>composer require jawira/doctrine-diagram-bundle --dev\n</code></pre>"},{"location":"installing.html#applications-that-dont-use-symfony-flex","title":"Applications that don't use Symfony Flex","text":"<p>Follow these steps to install DoctrineDiagramBundle in project that don't use Symfony Flex.</p> <p>Step 1: Download the Bundle</p> <p>Open a command console, enter your project directory and execute the following command to download the latest stable version of this bundle:</p> <pre><code>composer require jawira/doctrine-diagram-bundle --dev\n</code></pre> <p>Step 2: Enable the Bundle</p> <p>Then, enable the bundle by adding it to the list of registered bundles in the <code>config/bundles.php</code> file of your project:</p> <pre><code>// config/bundles.php\n\nreturn [\n    // ...\n    \\Jawira\\DoctrineDiagramBundle\\DoctrineDiagramBundle::class =&gt; ['dev' =&gt; true, 'test' =&gt; true ],\n];\n</code></pre>"},{"location":"plantuml.html","title":"PlantUML","text":"<p>PlantUML is required to save diagrams in <code>png</code> or <code>svg</code> format.</p> <p>DoctrineDiagramBundle can use either a locally installed version of PlantUML or connect to a remote PlantUML server.</p> <p>Additionally, this bundle requires a relatively newer version of PlantUML, anything greater than <code>1.2022.0</code> should be ok.</p>"},{"location":"plantuml.html#installing-plantuml-locally","title":"Installing PlantUML locally","text":""},{"location":"plantuml.html#requirements","title":"Requirements","text":"<p>To work properly, PlantUML has the following requirements:</p> <ul> <li>java 8</li> <li>GraphViz - Installing GraphViz</li> </ul> <p>Please follow the official documentation to learn how to install PlantUML in your OS: https://plantuml.com/en/starting</p>"},{"location":"plantuml.html#installing-plantuml-with-composer","title":"Installing PlantUML with Composer","text":"<p>I have developed a convenience package to install PlantUML using Composer.</p> <p>https://packagist.org/packages/jawira/plantuml</p> <pre><code>composer require jawira/plantuml\n</code></pre> <p>You will find <code>plantuml.jar</code> inside <code>vendor</code> directory: <code>./vendor/jawira/plantuml/bin/plantuml.jar</code>.</p>"},{"location":"plantuml.html#plantuml-server","title":"PlantUML server","text":"<p>A PlantUML server is required if you want to save diagrams in <code>png</code> and <code>svg</code> formats.</p>"},{"location":"plantuml.html#running-plantuml-picoserver","title":"Running PlantUML picoserver","text":"<p>First, ensure you have PlantUML installed on your system. Then run following command to create a local PlantUML server available on port 8080:</p> <pre><code>plantuml -picoserver:8080\n</code></pre> <p>Once executed, your server becomes accessible through http://localhost:8080. Additionally, declare this new server in <code>config/packages/doctrine_diagram.yaml</code> as follows:</p> <pre><code># config/packages/doctrine_diagram.yaml\ndoctrine_diagram:\n    # ...\n    convert:\n        server: 'http://localhost:8080/plantuml'\n</code></pre> <p>For more information visit: PlantUML Picoweb Documentation</p>"},{"location":"plantuml.html#plantuml-server-with-docker","title":"PlantUML server with Docker","text":"<p>An alternative method to set up a PlantUML server involves leveraging Docker.</p> <p>Use Docker to establish a PlantUML server using the following command. This command ensures that the server is accessible via port 8080.</p> <pre><code>docker run -d -p 8080:8080 plantuml/plantuml-server:jetty\n</code></pre> <p>Notice that, when using Docker, <code>/plantuml</code> path is not used in <code>doctrine_diagram.yaml</code>.</p> <pre><code># config/packages/doctrine_diagram.yaml\ndoctrine_diagram:\n    # ...\n    convert:\n        server: 'http://localhost:8080/plantuml'\n</code></pre> <p>For further details, refer to: PlantUML in Docker Hub</p>"},{"location":"usage.html","title":"Usage","text":"<p>DoctrineDiagramBundle provides two Symfony commands to generate diagrams from your database:</p> <ul> <li><code>doctrine:diagram:er</code> - To generate Entity-Relationship diagrams.</li> <li><code>doctrine:diagram:class</code> - To generate Class diagrams.</li> </ul>"},{"location":"usage.html#generating-entity-relationship-diagrams","title":"Generating Entity-Relationship diagrams","text":"<p>An Entity-Relationship (ER) diagram visually represents the entities (such as tables) in a database, their attributes (such as columns), and the relationships between them.</p> <p>Use the following command to generate Entity-Relationship diagrams:</p> <pre><code>bin/console doctrine:diagram:er\n</code></pre> <p>You can also use the following shortcut:</p> <pre><code>bin/console d:d:er\n</code></pre> <p>If you are using the default configuration, a file named <code>er.svg</code> will be created at the root of your project.</p> <p></p> <p>If your application uses multiple databases, you can specify which DBAL connection to use using the <code>--connection</code> option:</p> <pre><code>bin/console doctrine:diagram:er --connection=employees\n</code></pre> <p>You can also set the DBAL connection in <code>doctrine_diagram.yaml</code>.</p> <pre><code>doctrine_diagram:\n    er:\n        connection: employees\n</code></pre> <p>Set the connection to null, and the default connection will be used.</p>"},{"location":"usage.html#generating-class-diagrams","title":"Generating Class diagrams","text":"<p>A UML Class diagram visually represents the classes in your project, including their properties (attributes), methods (operations), and the relationships between them.</p> <p>Use the following command to generate Class diagrams:</p> <pre><code>bin/console doctrine:diagram:class\n</code></pre> <p>You can also use the following shortcut:</p> <pre><code>bin/console d:d:class\n</code></pre> <p>Info</p> <p>DoctrineDiagramBundle will only use Doctrine entities to generate the diagram. Additionally, only properties with the <code>ORM\\Column</code> attribute are displayed, other class properties are ignored.</p> <p>If you are using the default configuration, a file named <code>class.svg</code> will be created at the root of your project.</p> <p></p> <p>If your application uses multiple databases, you can specify which Entity Manager to use using the <code>--em</code> option:</p> <pre><code>bin/console doctrine:diagram:class --em=customers\n</code></pre> <p>In <code>doctrine_diagram.yaml</code>:</p> <pre><code>doctrine_diagram:\n    class:\n        em: customers\n</code></pre> <p>Set <code>em</code> to null, and the default Entity Manager will be used.</p>"},{"location":"usage.html#how-to-pipe-output","title":"How to pipe output","text":"<p>Use <code>php://stdout</code> as the destination file to redirect image to standard output.</p> <p>For example:</p> <pre><code>bin/console doctrine:diagram:er --filename=\"php://stdout\" --format=puml | tee diagram.puml\n</code></pre>"},{"location":"usage.html#known-issues","title":"Known Issues","text":""},{"location":"usage.html#error-failed-to-open-stream-http-request-failed","title":"Error: \"Failed to open stream: HTTP request failed!\"","text":"<p>This error occurs when you are trying to generate a diagram in SVG or PNG formats, and you are using the public PlantUML server.</p> <p>The problem is that the diagram you are trying to create is too large, and the PlantUML server has limited diagram sizes to avoid abuse.</p> <p>Solution 1</p> <p>Use PlantUML locally instead of a web server. This is explained in Configuration page.</p> <p>Solution 2</p> <p>Generate a diagram in PUML format. This diagram is generated locally and doesn't require the PlantUML server. Then, use the <code>plantuml</code> executable locally to convert the PUML diagram to the desired format.</p> <pre><code>bin/console doctrine:diagram:er --format=puml\nbin/console doctrine:diagram:class --format=puml\n</code></pre> <p>Solution 3</p> <p>Do not use the public PlantUML server; use your own PlantUML server instead.</p> <p>Then, access your server using the command option <code>--server</code>, or in the <code>doctrine_diagram.yaml</code> file.</p>"},{"location":"usage.html#error-unknown-column-type-uuid-requested","title":"Error 'Unknown column type \"uuid\" requested'","text":"<p>You encounter the following error when trying to generate a diagram:</p> <p>CRITICAL  [console] Error thrown while running command \"doctrine:diagram\". Message: \"Unknown column type \"uuid\" requested. Any Doctrine type that you use has to be registered with \\Doctrine\\DBAL\\Types\\Type::addType().</p> <p>To fix this error, add a custom type in the doctrine.yaml config file. For example:</p> <pre><code>doctrine:\n    dbal:\n        types:\n            uuid: Symfony\\Bridge\\Doctrine\\Types\\UuidType\n</code></pre> <p>Source: Registering custom Mapping Types.</p>"},{"location":"usage.html#error-syntax-error","title":"Error \"Syntax Error\"","text":"<p>When trying to generate a Diagram, you get the following error in the terminal:</p> <pre><code>Error Output:\n================\nERROR\n7\nSyntax Error?\nSome diagram description contains errors\n</code></pre> <p>Solution</p> <p>Use a newer version of PlantUML, older versions of PlantUML do not support features like themes and custom namespace separators.</p>"}]}